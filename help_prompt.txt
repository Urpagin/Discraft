# Prompt

I am using Rust.

I have two infinite loop-type async functions running as joined tokio tasks. One is listening for TCP connection packets and the other function is listening Discord messages via the Poise library.

- I need to send a Discord message when the TCP function receives a packet.
- I need to send a TCP packet when the Discord function received a message.

I am thinking of making two callback functions that are called when a TCP packet or a Discord message is received.

However, let's imagine we're in the discord_msg_callback(msg) function, how do I send a TCP packet given that the TcpStream object was not initiated inside the current function. Same goes with sending a Discord message in the tcp_packet_callback(packet) function.


Do you have any idea on how I could do that?

# Answer

Use `use tokio::sync::mpsc;` mpsc channels to transmit packets & messages.

Concerning the listening of, for example, TCP packets & the channel that receives the Discord MSGs use tokio::select!
that waits on multiple async operations and proceeds with the first one.

Do a loop { tokio::select {}}
